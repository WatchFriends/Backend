function Socket(t,e,s){this.nsp=t,this.server=t.server,this.adapter=this.nsp.adapter,this.id="/"!==t.name?t.name+"#"+e.id:e.id,this.client=e,this.conn=e.conn,this.rooms={},this.acks={},this.connected=!0,this.disconnected=!1,this.handshake=this.buildHandshake(s),this.fns=[]}var socket=io(),Emitter=require("events").EventEmitter,parser=require("socket.io-parser"),url=require("url"),debug=require("debug")("socket.io:socket"),hasBin=require("has-binary"),assign=require("object-assign");module.exports=exports=Socket,exports.events=["error","connect","disconnect","disconnecting","newListener","removeListener"];var flags=["json","volatile","broadcast"],emit=Emitter.prototype.emit;Socket.prototype.__proto__=Emitter.prototype,flags.forEach(function(t){Socket.prototype.__defineGetter__(t,function(){return this.flags=this.flags||{},this.flags[t]=!0,this})}),Socket.prototype.__defineGetter__("request",function(){return this.conn.request}),Socket.prototype.buildHandshake=function(t){function e(){var e=url.parse(s.request.url,!0).query;return assign({},t,e)}var s=this;return{headers:this.request.headers,time:new Date+"",address:this.conn.remoteAddress,xdomain:!!this.request.headers.origin,secure:!!this.request.connection.encrypted,issued:+new Date,url:this.request.url,query:e()}},Socket.prototype.emit=function(t){if(~exports.events.indexOf(t))emit.apply(this,arguments);else{var e=Array.prototype.slice.call(arguments),s={};s.type=hasBin(e)?parser.BINARY_EVENT:parser.EVENT,s.data=e;var o=this.flags||{};if("function"==typeof e[e.length-1]){if(this._rooms||o.broadcast)throw new Error("Callbacks are not supported when broadcasting");debug("emitting packet with ack id %d",this.nsp.ids),this.acks[this.nsp.ids]=e.pop(),s.id=this.nsp.ids++}this._rooms||o.broadcast?this.adapter.broadcast(s,{except:[this.id],rooms:this._rooms,flags:o}):this.packet(s,{volatile:o.volatile,compress:o.compress}),delete this._rooms,delete this.flags}return this},Socket.prototype.to=Socket.prototype.in=function(t){return this._rooms=this._rooms||[],~this._rooms.indexOf(t)||this._rooms.push(t),this},Socket.prototype.send=Socket.prototype.write=function(){var t=Array.prototype.slice.call(arguments);return t.unshift("message"),this.emit.apply(this,t),this},Socket.prototype.packet=function(t,e){t.nsp=this.nsp.name,e=e||{},e.compress=!1!==e.compress,this.client.packet(t,e)},Socket.prototype.join=function(t,e){debug("joining room %s",t);var s=this;return this.rooms.hasOwnProperty(t)?(e&&e(null),this):(this.adapter.add(this.id,t,function(o){return o?e&&e(o):(debug("joined room %s",t),s.rooms[t]=t,void(e&&e(null)))}),this)},Socket.prototype.leave=function(t,e){debug("leave room %s",t);var s=this;return this.adapter.del(this.id,t,function(o){return o?e&&e(o):(debug("left room %s",t),delete s.rooms[t],void(e&&e(null)))}),this},Socket.prototype.leaveAll=function(){this.adapter.delAll(this.id),this.rooms={}},Socket.prototype.onconnect=function(){debug("socket connected - writing packet"),this.nsp.connected[this.id]=this,this.join(this.id),this.packet({type:parser.CONNECT})},Socket.prototype.onpacket=function(t){switch(debug("got packet %j",t),t.type){case parser.EVENT:this.onevent(t);break;case parser.BINARY_EVENT:this.onevent(t);break;case parser.ACK:this.onack(t);break;case parser.BINARY_ACK:this.onack(t);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",t.data)}},Socket.prototype.onevent=function(t){var e=t.data||[];debug("emitting event %j",e),null!=t.id&&(debug("attaching ack callback to event"),e.push(this.ack(t.id))),this.dispatch(e)},Socket.prototype.ack=function(t){var e=this,s=!1;return function(){if(!s){var o=Array.prototype.slice.call(arguments);debug("sending ack %j",o);var i=hasBin(o)?parser.BINARY_ACK:parser.ACK;e.packet({id:t,type:i,data:o}),s=!0}}},Socket.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(debug("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):debug("bad ack %s",t.id)},Socket.prototype.ondisconnect=function(){debug("got disconnect packet"),this.onclose("client namespace disconnect")},Socket.prototype.onerror=function(t){this.listeners("error").length?this.emit("error",t):(console.error("Missing error handler on `socket`."),console.error(t.stack))},Socket.prototype.onclose=function(t){return this.connected?(debug("closing socket - reason %s",t),this.emit("disconnecting",t),this.leaveAll(),this.nsp.remove(this),this.client.remove(this),this.connected=!1,this.disconnected=!0,delete this.nsp.connected[this.id],void this.emit("disconnect",t)):this},Socket.prototype.error=function(t){this.packet({type:parser.ERROR,data:t})},Socket.prototype.disconnect=function(t){return this.connected?(t?this.client.disconnect():(this.packet({type:parser.DISCONNECT}),this.onclose("server namespace disconnect")),this):this},Socket.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this},Socket.prototype.dispatch=function(t){debug("dispatching an event %j",t);var e=this;this.run(t,function(s){process.nextTick(function(){return s?e.emit("error",s.data||s.message):void emit.apply(e,t)})})},Socket.prototype.use=function(t){return this.fns.push(t),this},Socket.prototype.run=function(t,e){function s(i){o[i](t,function(t){return t?e(t):o[i+1]?void s(i+1):e(null)})}var o=this.fns.slice(0);return o.length?void s(0):e(null)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
